#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>

// Wi-Fi credentials
const char* WIFI_SSID = "Professor_RS";
const char* WIFI_PASSWORD = "11235813";

// MQTT broker details
const char* MQTT_SERVER = "35.226.208.187";
const int MQTT_PORT = 1883;
const char* MQTT_TOPIC = "your_topic";

// Create an instance of the Wi-Fi client
WiFiClient wifiClient;

// Create an instance of the MQTT client
PubSubClient mqttClient(wifiClient);

// Pin definitions
const int PMS1_RX_PIN = D3;  // RX pin of the first Plantower sensor
const int PMS1_TX_PIN = D4;  // TX pin of the first Plantower sensor

const int PMS2_RX_PIN = D5;  // RX pin of the second Plantower sensor
const int PMS2_TX_PIN = D6;  // TX pin of the second Plantower sensor

// SoftwareSerial instances for Plantower sensors
SoftwareSerial pmsSerial1(PMS1_RX_PIN, PMS1_TX_PIN);
SoftwareSerial pmsSerial2(PMS2_RX_PIN, PMS2_TX_PIN);

// Plantower sensor data structure
struct PMS5003Data {
  uint16_t pm1_0;
  uint16_t pm2_5;
  uint16_t pm10;
};

PMS5003Data sensorData1;
PMS5003Data sensorData2;

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to Wi-Fi...");
  }

  Serial.println("Connected to Wi-Fi");

  // Set the MQTT server and callback functions
  mqttClient.setServer(MQTT_SERVER, MQTT_PORT);

  // Connect to MQTT broker
  connectToMqttBroker();

  // Initialize Plantower sensors
  pmsSerial1.begin(9600);
  pmsSerial2.begin(9600);
}

void loop() {
  // Maintain the MQTT connection
  if (!mqttClient.connected()) {
    reconnectToMqttBroker();
  }
  mqttClient.loop();

  // Read data from Plantower sensors
  readPMSData(&pmsSerial1, &sensorData1);
  readPMSData(&pmsSerial2, &sensorData2);

  // Publish data to MQTT broker
  publishData(sensorData1, "Sensor1");
  publishData(sensorData2, "Sensor2");

  delay(1000); // Adjust the delay as needed
}

void connectToMqttBroker() {
  while (!mqttClient.connected()) {
    Serial.println("Connecting to MQTT broker...");
    if (mqttClient.connect("ESP8266_Client")) {
      Serial.println("Connected to MQTT broker");
    } else {
      Serial.print("Failed to connect to MQTT broker, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void reconnectToMqttBroker() {
  Serial.println("Lost connection to MQTT broker. Reconnecting...");
  while (!mqttClient.connected()) {
    if (mqttClient.connect("ESP8266_Client")) {
      Serial.println("Reconnected to MQTT broker");
    } else {
      Serial.print("Failed to reconnect to MQTT broker, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void publishData(const PMS5003Data& data, const char* sensorName) {
  // Convert the data to a JSON string
  String json = "{\"pm1_0\":" + String(data.pm1_0) + ","
                "\"pm2_5\":" + String(data.pm2_5) + ","
                "\"pm10\":" + String(data.pm10) + "}";

  // Create the MQTT topic for the sensor
  String topic = MQTT_TOPIC + String("/") + sensorName;

  // Publish the data to the MQTT topic
  mqttClient.publish(topic.c_str(), json.c_str());
  Serial.println("Published data to " + topic + ": " + json);
}

bool readPMSData(SoftwareSerial* serial, PMS5003Data* data) {
  if (serial->available() >= 32) {
    uint8_t buffer[32];
    serial->readBytes(buffer, 32);

    if (buffer[0] == 0x42 && buffer[1] == 0x4D) {
      data->pm1_0 = buffer[4] * 256 + buffer[5];
      data->pm2_5 = buffer[6] * 256 + buffer[7];
      data->pm10 = buffer[8] * 256 + buffer[9];

      return true;
    }
  }

  return false;
}
